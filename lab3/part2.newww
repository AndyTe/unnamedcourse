/* Lab [3] Part [2] */

module part2( input [7:4] a, input [3:0] b, input [1:0] Function, output [7:0] ALUout );
	wire [3:0] c;
	wire [3:0] s;
	wire HEX[5:0];
    
	 // Instantiate each function outside of the always block
    fourBitRippleCarryAdder(.a(a), .b(b), .c_in(1'b0), .c_out(c), .s(s));
	 hex_decoder(.c(a[7:4]),.display(HEX[2])); 
	 hex_decoder(.c(b[3:0]),.display(HEX[0]));
	 hex_decoder(.c(ALUout[3:0]),.display(HEX[4]));
	 hex_decoder(.c(ALUout[7:4]),.display(HEX[5])); 
    
	 always @ (a, b) begin
        case(Function)
			2'b00 : ALUout = {c[3], s}; // output sum of RCA
			2'b01 : ALUout = |{a , b} ; // output 8'b[0][0][0][0][0][0][0][1] if a or b
			2'b10 : ALUout = &{a , b} ; // output 8'b[0][0][0][0][0][0][0][1] if a and b
			2'b11 : ALUout = {a, b}; // output a concat b
			default: ALUout = 3'b000;
        endcase
    end
	 
endmodule

// Full adder module for function [0]

module hex_decoder(c, display);
	input [3:0] c;
	output [6:0] display;
	
	assign display[[0]]	= (!c[3] & !c[2] & !c[1] & c[0])|(c[3] & !c[2] & c[1] & c[0])|(c[3] & !c[2] & c[1] & c[0])|(c[3] & c[2] & !c[1] & c[0]);
	assign display[[1]] = (!c[3] & c[2] & !c[1] & c[0])|(!c[3] & c[2] & c[1] & !c[0])|(c[3] & !c[2] & c[1] & c[0])|(c[3] & c[2] & !c[1] & !c[0])|(c[3] & c[2] & c[1] & !c[0])|(c[3] & c[2] & c[1] & c[0]);
	assign display[[2]] = (!c[3] & !c[2] & c[1] & !c[0])|(c[3] & c[2] & !c[1] & !c[0])|(c[3] & c[2] & c[1] & !c[0])|(c[3] & c[2] & c[1] & c[0]);
	assign display[3] = (!c[3] & !c[2] & !c[1] & c[0])|(!c[3] & c[2] & !c[1] & !c[0])|(!c[3] & c[2] & c[1] & c[0])|(c[3] & !c[2] & c[1] & !c[0])|(c[3] & c[2] & c[1] & c[0]);
	assign display[4] = (!c[3] & !c[2] & !c[1] & c[0])|(!c[3] & !c[2] & c[1] & c[0])|(!c[3] & c[2] & !c[1] & !c[0])|(!c[3] & c[2] & !c[1] & c[0])|(!c[3] & c[2] & c[1] & c[0])|(c[3] & !c[2] & !c[1] & c[0]);
	assign display[5] = (!c[3] & !c[2] & !c[1] & c[0])|(!c[3] & !c[2] & c[1] & !c[0])|(!c[3] & !c[2] & c[1] & c[0])|(!c[3] & c[2] & c[1] & c[0])|(c[3] & c[2] & !c[1] & c[0]);
	assign display[6] = (!c[3] & !c[2] & !c[1] & !c[0])|(!c[3] & !c[2] & !c[1] & c[0])|(!c[3] & c[2] & c[1] & c[0])|(c[3] & c[2] & !c[1] & !c[0]);

endmodule

module fullAdder( input c_in, a, b, output c_out, s );

	assign s = (a ^ b) ^ c_in; // XOR 
	assign c_out = (a & b) | (b & c_in) | (a & c_in);

endmodule // fullAdder

// Function [0]: Four Bit Ripple Carry Adder Module

module fourBitRippleCarryAdder( input [3:0] a, input [3:0] b, input c_in, output c_out, output [3:0] s );

	wire[2:0] c; 
	
    fullAdder bit0 (.c_in(c_in), .a(a[0]), .b(b[0]), .c_out(c[0]), .s(s[0]));
    fullAdder bit1 (.c_in(c[0]), .a(a[1]), .b(b[1]), .c_out(c[1]), .s(s[1]));
    fullAdder bit2 (.c_in(c[1]), .a(a[2]), .b(b[2]), .c_out(c[2]), .s(s[2]));
    fullAdder bit3 (.c_in(c[2]), .a(a[3]), .b(b[3]), .c_out(c_out), .s(s[3]));
	
endmodule // fourBitRippleCarryAdder
